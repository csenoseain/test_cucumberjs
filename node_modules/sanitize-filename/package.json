{
  "name": "sanitize-filename",
  "version": "1.1.1",
  "description": "Sanitize string for use as filename",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:parshap/node-sanitize-filename.git"
  },
  "keywords": [
    "file",
    "name",
    "filename",
    "sanitize",
    "validate",
    "escape"
  ],
  "author": {
    "name": "Parsha Pourkhomami"
  },
  "license": "Public Domain",
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "readme": "# sanitize-filename\n\nSanitize a string to be safe for use as a file name in Windows and Unix\nsystems by stripping all [control\ncharacters](http://en.wikipedia.org/wiki/C0_and_C1_control_codes) and\nrestricted characters (`\\/:*?\"<>|`).\n\n# Example\n\n```js\n// Some string that may be unsafe as a filesystem filename\nvar UNSAFE_FILENAME = \"h*ello:/world?\\u0000\";\n\n// Sanitize the unsafe filename to be safe for use as a filename\nvar sanitize = require(\"sanitize-filename\"),\n\tfilename = sanitize(UNSAFE_FILENAME);\n\n// Create a file using the safe filename\nrequire(\"fs\").createWriteStream(filename).end();\n```\n\n# API\n\n## sanitize(filename, [options])\n\nSanitize the input string, `filename`, and replace unsafe characters\nwith optional replacement. The `options.replacement` can be a string to\nreplace unsafe characters with.\n\n# Installation\n\n```\nnpm install sanitize-filename\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/parshap/node-sanitize-filename/issues"
  },
  "homepage": "https://github.com/parshap/node-sanitize-filename",
  "_id": "sanitize-filename@1.1.1",
  "dist": {
    "shasum": "73dbae6156e6e5562e6d1ea7df66ec4b2c61640e"
  },
  "_from": "sanitize-filename@",
  "_resolved": "https://registry.npmjs.org/sanitize-filename/-/sanitize-filename-1.1.1.tgz"
}
